#!/usr/bin/env python3

import os, sys, socket, subprocess, time

from PyQt5 import QtWidgets, QtGui, QtCore


def internetCheckConnected(host="8.8.8.8", port=53, timeout=3):
    """
    Host: 8.8.8.8 (google-public-dns-a.google.com)
    OpenPort: 53/tcp
    Service: domain (DNS/TCP)
    """
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
        return True
    except socket.error as ex:
        print(ex)
        return False


class LiteInstaller(object):

    def __init__(self):

        self.already_fetched_packages = 0
        self.already_extracted_packages = 0
        self.total_packages_to_be_installed = 0
        self.percentage_was_already_downloaded = 0.0
        self.having_downloaded_means_percent = 0.5  # If we had to download all packages, the progress is this much after the download phase
        self.file_symlink_resolved = os.path.join(sys.path[0], os.path.basename(os.path.realpath(sys.argv[0])))

        self.iconfile = None
        for file in os.listdir(os.path.dirname(self.file_symlink_resolved) + "/Resources/"):
            if file.endswith(".png"):
                self.iconfile = os.path.dirname(self.file_symlink_resolved) + "/Resources/" + "/" + file
                break

        self.ext_process = QtCore.QProcess()

        results = self.read_file_contents("executable")
        self.filename = os.path.realpath(results[0])
        self.packages = self.read_file_contents("packages")

        executable = os.access(self.filename, os.X_OK)
        print(executable)
        if(executable):
            # os.execve(self.filename, sys.argv, os.environ) # What sh exec also uses. Leads to issues when files are referenced in relation to the main binary path
            subprocess.call(["launch"] + [self.filename] + sys.argv[1:])
        else:
            app = QtWidgets.QApplication(sys.argv)

            if internetCheckConnected() == False:
                print("Offline?")
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setWindowTitle(" ")
                msg.setText("%s needs to be downloaded before it can be used.\nThis requires an active internet connection." % os.path.basename(self.file_symlink_resolved))
                msg.exec_()
                sys.exit(0)

            reply = self.show_message()
            print(reply)
            if reply == QtWidgets.QMessageBox.No:
                sys.exit(0)

            print("Proceeding to install %s from the %s packages" %(self.filename, self.packages))
            self.show_install()


    def show_message(self):
        self.msgBox = QtWidgets.QMessageBox()

        if self.iconfile:
            self.msgBox.setIconPixmap(QtGui.QPixmap(self.iconfile).scaledToWidth(64, QtCore.Qt.SmoothTransformation))
        self.msgBox.setWindowTitle(" ")
        self.msgBox.setText("%s needs to be downloaded before it can be used." % os.path.basename(self.file_symlink_resolved))
        self.msgBox.setInformativeText("Do you want to download it now?")
        # self.msgBox.setDetailedText("The following packages and their dependencies be installed:\n" + str(self.packages))
        print("The following packages and their dependencies be installed:\n" + str(self.packages))
        self.msgBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
        self.msgBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
        return(self.msgBox.exec())


    def startInstallProcess(self):

        # self.ext_process.setStandardOutputFile(wizard.logfile) # TODO: Append lines to "Details" box

        # self.setProcessChannelMode(QtCore.QProcess.MergedChannels)
        codec = QtCore.QTextCodec.codecForLocale()
        self.ext_process._decoder_stdout = codec.makeDecoder()
        self.ext_process._decoder_stderr = codec.makeDecoder()
        self.ext_process.readyReadStandardOutput.connect(self._ready_read_standard_output)
        # self.ext_process.readyReadStandardError.connect(self._ready_read_standard_error)


        self.ext_process.finished.connect(self.onProcessFinished)
        env = QtCore.QProcessEnvironment.systemEnvironment()
        env.insert("SUDO_ASKPASS", os.path.dirname(self.file_symlink_resolved) + "/Resources/askpass.py")
        env.insert("SUDO_ASKPASS_TEXT",
                   "Administrator privilege is required to install %s." % os.path.basename(self.file_symlink_resolved))
        self.ext_process.setProcessEnvironment(env)
        self.ext_process.setProgram("sudo")
        args = ["-A", "-E", "pkg", "install", "-y"] + self.packages
        self.ext_process.setArguments(args)
        try:
            self.ext_process.start()
            # print(pid) # This is None for non-detached processes. If we ran detached, we would get the pid back here
            print("pkg install process started")
            print(self.ext_process.program())
            print(self.ext_process.arguments())
            print(self.ext_process.processEnvironment())
        except:  # FIXME: do not use bare 'except'
            self.showErrorPage("pkg install cannot be started.")
            return  # Stop doing anything here


    def _ready_read_standard_output(self):

        raw_bytes = self.ext_process.readAllStandardOutput()
        text = self.ext_process._decoder_stdout.toUnicode(raw_bytes)
        lines = text.split("\n")
        for line in lines:
            print("OUT:", line)
            if "Updating FreeBSD repository" in line:
                # Now pkg has actually started working
                self.progress.setMaximum(100)
                self.progress.setMinimum(0)
                self.progress.setValue(1)
            if line != ".":
                self.details_textedit.append(line)
            if line.startswith("The following"):
                self.total_packages_to_be_installed = int(line.split(" ")[2].strip())
                print("total_packages_to_be_installed:", self.total_packages_to_be_installed)
            if "Fetching" in line:
                p = (self.already_fetched_packages / self.total_packages_to_be_installed) * self.having_downloaded_means_percent
                self.progress.setValue(int(round(p*100)))
                print(p)
                self.already_fetched_packages = self.already_fetched_packages + 1 # Increment at the end, because the relevant line is printed when the action starts, not when it finishes
            if "Extracting" in line:
                if self.already_fetched_packages < self.total_packages_to_be_installed:
                    # Some or all packages had already been downloaded and were re-used from the cache.
                    # This means that the progress bar should not jump to 50% after the downloading phase
                    # but to less than that
                    self.percentage_was_already_downloaded = self.already_fetched_packages / self.total_packages_to_be_installed
                    self.progress_after_downloading = (1 - self.percentage_was_already_downloaded) * self.having_downloaded_means_percent # Where our percentage indicator should be after the download phase: If everything came from the cache, at 0, If nothing came from the cache, at 0.5.
                self.already_fetched_packages = self.total_packages_to_be_installed # Once we are in the Extracting phase, all packages have been fetched (or have come from the cache)

                p = self.having_downloaded_means_percent + (self.already_extracted_packages / self.total_packages_to_be_installed) * (1-self.having_downloaded_means_percent)
                self.progress.setValue(int(round(p*100)))
                print(p)
                self.already_extracted_packages = self.already_extracted_packages + 1 # Increment at the end, because the relevant line is printed when the action starts, not when it finishes


    # def scroll_to_last_line(self):
    #     cursor = self.textCursor()
    #     cursor.movePosition(QTextCursor.End)
    #     cursor.movePosition(QTextCursor.Up if cursor.atBlockStart() else
    #                         QTextCursor.StartOfLine)
    #     self.setTextCursor(cursor)


    def _ready_read_standard_error(self):
        raw_bytes = self.ext_process.readAllStandardError()
        text = self.ext_process._decoder_stdout.toUnicode(raw_bytes)
        print("ERR:", text)


    def onProcessFinished(self):
        self.progress.setValue(100)
        print("Installer script process finished")
        # cursor = self.output.textCursor()
        # cursor.movePosition(cursor.End)
        # cursor.insertText(str(self.ext_process.readAllStandardOutput()))
        # self.output.ensureCursorVisible()
        exit_code = self.ext_process.exitCode()
        print("Installer script exit code: %s" % exit_code)
        time.sleep(1)
        executable = os.access(self.filename, os.X_OK)
        if executable == True:
            # os.execve(self.filename, sys.argv, os.environ) # What sh exec also uses. Leads to issues when files are referenced in relation to the main binary path
            self.msgBox.close()
            subprocess.call(["launch"] + [self.filename] + sys.argv[1:])
            sys.exit(0)


    def show_install(self):
        self.msgBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, " ", ("Downloading %s..." % (os.path.basename(self.file_symlink_resolved))), QtWidgets.QMessageBox.NoButton)
        # self.msgBox.setWindowFlags(QtCore.Qt.CustomizeWindowHint) # Needed for the next line
        self.msgBox.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False) # Remove the Close button frim the window decoration; FIXME: Why does this remove the window decorations altogether?
        # self.msgBox.setStyleSheet("QTextEdit{min-width: 500px;}")
        self.msgBox.setStyleSheet("QDialogButtonBox,QTextEdit{min-width: 500px; } QLabel{min-height: 50px;} QProgressBar{min-width: 410px;}") # FIXME: Do this without hardcoding 410px
        self.msgBox.setStandardButtons(QtWidgets.QMessageBox.NoButton)
        # self.msgBox.setDefaultButton(QtWidgets.QMessageBox.Cancel)
        self.msgBox.setDetailedText(" ") # Brings it into existence?
        self.details_textedit = self.msgBox.findChild(QtWidgets.QTextEdit)

        if self.details_textedit is not None:
            print("Found QTextEdit for the details")
            self.details_textedit.setFixedSize(self.details_textedit.sizeHint())



        if self.iconfile:
            self.msgBox.setIconPixmap(QtGui.QPixmap(self.iconfile).scaledToWidth(64, QtCore.Qt.SmoothTransformation))

        self.msgBox.layout().setAlignment(QtCore.Qt.AlignTop)


        self.progress = QtWidgets.QProgressBar()
        # Set the minimum, maximum and current values to get an indeterminate progress bar
        self.progress.setMaximum(100)
        self.progress.setMinimum(0)
        # self.progress.setValue(0)

        self.progress.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Add the progress bar at the bottom (last row + 1) and first column with column span
        # self.msgBox.layout().addWidget(self.progress, self.msgBox.layout().rowCount(), 0, 1, self.msgBox.layout().columnCount(), QtCore.Qt.AlignCenter)
        self.msgBox.layout().addWidget(self.progress, 1, 1, 1, self.msgBox.layout().columnCount(),
                                  QtCore.Qt.AlignCenter)

        self.msgBox.layout().addWidget(QtWidgets.QLabel(), 1, 1, 1, self.msgBox.layout().columnCount(),
                                  QtCore.Qt.AlignCenter)
        self.startInstallProcess()
        self.msgBox.exec()


    def read_file_contents(self, filename):
        global results
        file = open(os.path.dirname(self.file_symlink_resolved) + "/Resources/" + filename)
        lines = file.read().split("\n")
        file.close()
        results = []
        for line in lines:
            if "#" in line:
                line = line.split("#")[0]
            line = line.strip()
            if " " in line:
                elements = line.split(" ")
                for element in elements:
                    results.append(element)
            else:
                if line != "":
                    results.append(line)
        return results

if __name__ == "__main__":
    LI = LiteInstaller()
