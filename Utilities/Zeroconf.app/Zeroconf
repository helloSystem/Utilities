#!/usr/bin/env python3


# Simple Zeroconf browser written for FreeBSD in PyQt5


# Copyright (c) 2020-22, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os, sys, time
from urllib.parse import urlparse

try:
    from PyQt5 import QtWidgets, QtGui, QtCore
except:
    print("Could not import PyQt5. On FreeBSD, sudo pkg install py37-qt5-widgets")

sys.path.append(os.path.dirname(__file__) + "/Resources/")
    
# https://stackoverflow.com/a/377028
def which(program):

    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


class ZeroconfService():

    def __init__(self, avahi_browse_line, browser):
        self.browser = browser
        parts = avahi_browse_line.split(";")
        if len(parts) < 10:
            return
        self.interface = parts[1]
        self.ip_version = parts[2]
        self.name = parts[3] # .decode("utf-8", "strict")
        self.service_type = parts[4]
        self.domain = parts[5]
        self.hostname_with_domain = parts[6]
        self.address = parts[7]
        self.port = parts[8]
        self.txt = parts[9]
        self.url = "%s://%s:%s" % (self.service_type.split("_")[1].split("-")[0].replace(".", ""), self.hostname_with_domain, self.port)

    def __repr__(self):
        return "%s on %s:%s" % (self.service_type, self.hostname_with_domain, self.port)

    # Define here what we should do with detected services. This gets run whenever a service is added
    def handle(self):
    
        if not self.browser.is_unique(self.url):
            return
            
        print("Handling %s", str(self))
        icon = "unknown"
        if self.url.startswith("device"):
            icon = "computer"
        if self.url.startswith("ssh"):
            icon = "terminal"
        if self.url.startswith("sftp") or self.url.startswith("smb"):
            icon = "folder"
        if self.url.startswith("raop"):
            # AirPlay
            icon = "network-wireless"
        if self.url.startswith("pulse"):
            # PulseAudio
            icon = "audio-card"
        if self.url.startswith("scanner") or self.url.startswith("uscan"):
            icon = "scanner"
        if self.url.startswith("http"):
            icon = "applications-internet"
        if self.url.startswith("ipp") or self.url.startswith("print") or self.url.startswith("pdl"):
            icon = "printer"
        displayed_text = self.url
        item = QtWidgets.QListWidgetItem(QtGui.QIcon.fromTheme(icon), self.url)
        url = self.url
        if "path=" in self.txt:
            print("TODO: use TXT path=")
        item.__setattr__('url', url)
        self.browser.list_widget.addItem(item)


class sshLogin(QtWidgets.QDialog):
    def __init__(self, host=None, parent=None, type="ssh"):
        super(sshLogin, self).__init__(parent)
        self.host = host
        self.setWindowTitle("Username")
        self.textName = QtWidgets.QLineEdit(self)
        self.buttonLogin = QtWidgets.QPushButton('Connect', self)
        if type == "sftp":
            self.buttonLogin.clicked.connect(self.handleSftp)
        else:
            self.buttonLogin.clicked.connect(self.handleLogin)
        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.textName)
        layout.addWidget(self.buttonLogin)

    def handleLogin(self):
        self.accept() # Close dialog
        # Launch ssh in QTerminal
        proc = QtCore.QProcess()
        args = ["QTerminal", "-e", "ssh", self.host, "-l", self.textName.text()]
        try:
            proc.startDetached("launch", args)
            sys.exit(0)
        except:
            print("Cannot launch %s" % args[0])
            sys.exit(0)


    def handleSftp(self):
        self.accept() # Close dialog
        # Launch ssh in QTerminal
        proc = QtCore.QProcess()
        hostname = urlparse(self.host).hostname
        path = "/media/%s" % hostname.replace(".local", "")
        args = ["sshfs", "-o", "direct_io,idmap=user,allow_other,reconnect,ServerAliveInterval=15,ServerAliveCountMax=3", "-p",  str(urlparse(self.host).port), self.textName.text() + "@" + urlparse(self.host).hostname + ":/", path]
        print (" ".join(args))
        if not os.path.exists(path):
            try:
                os.makedirs(path)
            except OSError as error:
                print(error)
                exit(1)
        try:
            
            sys.exit(0)
        except:
            print("Cannot launch %s" % args[0])
            sys.exit(0)
        proc.startDetached("open", path)

class ZeroconfBrowser(object):

    def __init__(self):

        self.app = QtWidgets.QApplication(sys.argv)

        # Window
        self.window = QtWidgets.QMainWindow()
        self.window.setWindowTitle('Connnect to Server')
        self.window.setMinimumWidth(500)
        self.window.setMinimumHeight(350)
        self.window.closeEvent = self.quit
        self.layout = QtWidgets.QVBoxLayout()

        # List
        self.list_widget = QtWidgets.QListWidget()
        self.list_widget.setAlternatingRowColors(True)
        self.list_widget.itemDoubleClicked.connect(self.onDoubleClicked)
        self.layout.addWidget(self.list_widget)

        # Label
        # self.label = QtWidgets.QLabel()
        # self.label.setText("This application is written in PyQt5. It is very easy to extend. Look inside the .app to see its source code.")
        # self.label.setWordWrap(True)
        # self.layout.addWidget(self.label)

        self._showMenu()

        widget = QtWidgets.QWidget()
        widget.setLayout(self.layout)
        self.window.setCentralWidget(widget)
        self.window.show()

        self.ext_process = QtCore.QProcess()
        self.long_running_function()

        sys.exit(self.app.exec_())

    def quit(self, event):
        sys.exit(0)

    def is_unique(self, url):
        items = []
        for index in range(self.list_widget.count()):
            items.append(self.list_widget.item(index))
        for item in items:
            if item.__getattribute__("url") == url:
                return False
        return True
        
    def onDoubleClicked(self):
        print("Double clicked")
        url = self.list_widget.selectedItems()[0].__getattribute__("url")
        print(url)

        if url.startswith("http"):
            # TODO: Give preference to the default browser the user may have set
            proc = QtCore.QProcess()
            args = ["Falkon", url]
            try:
                proc.startDetached("launch", args)
                sys.exit(0)
            except:
                print("Cannot launch browser")
                sys.exit(0)
        elif url.startswith("scanner") or url.startswith("uscan"):
            # Launch Xsane in the hope that it can do something with it
            os.system("xsane")
            sys.exit(0)
        if url.startswith("ipp") or url.startswith("print") or url.startswith("pdl"):
            os.system("launch 'Print Settings'")
            sys.exit(0)
        elif url.startswith("sftp"):
            sftphL = sshLogin(host=url, type="sftp")
            if sftphL.exec_() == QtWidgets.QDialog.Accepted:
                sys.exit(0)
        elif url.startswith("ssh"):
            sshL = sshLogin(host=url, type="ssh")
            if sshL.exec_() == QtWidgets.QDialog.Accepted:
                sys.exit(0)
        else:
            reply = QtWidgets.QMessageBox.information(
                self.window,
                "To be implemented",
                "Something needs to be done here\nPull requests welcome!",                 QtWidgets.QMessageBox.Yes
            )

    def long_running_function(self):
        self.ext_process.finished.connect(self.onProcessFinished)
        self.ext_process.setProgram("avahi-browse")
        self.ext_process.setArguments(["-arlp"])

        try:
            pid = self.ext_process.start()
            print("avahi-browse started")
        except:
            self.showErrorPage("avahi-browse cannot be launched.")
            return  # Stop doing anything here


        if self.ext_process.waitForStarted(-1):
            while True:
                QtWidgets.QApplication.processEvents()  # Important trick so that the app stays responsive without the need for threading!
                time.sleep(0.1)
                while self.ext_process.canReadLine():
                    # This is a really crude attempt to read line-wise. TODO: Do more elegant, like in 'Mount Disk Image.app'
                    line = str(self.ext_process.readLine())
                    self.processLine(line)

        print("ERROR: We should never reach this!")

    def onProcessFinished(self):
        print("onProcessFinished called")

    def processLine(self, line):
        line = str(line).replace("b'", "").replace("\\n'", "")
        print(line)
        if line.startswith("="):
            s = ZeroconfService(line, self)
            s.handle()
        # TODO: Also handle removal:
        # if line.startswith("-"):
        
    def _showMenu(self):
        exitAct = QtWidgets.QAction('&Quit', self.window)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(sys.exit, 0)
        menubar = self.window.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(exitAct)
        aboutAct = QtWidgets.QAction('&About', self.window)
        aboutAct.setStatusTip('About this application')
        aboutAct.triggered.connect(self._showAbout)
        helpMenu = menubar.addMenu('&Help')
        helpMenu.addAction(aboutAct)


    def _showAbout(self):
        print("showDialog")
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("About")
        msg.setIconPixmap(QtGui.QPixmap(os.path.dirname(__file__) + "/Resources/Zeroconf.png"))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Zeroconf</h3>")
        msg.setInformativeText(
            "A simple utility to browse services on the network announced with Zeroconf<br><br>Grateful acknowledgment is made to <a href='https://en.wikipedia.org/wiki/Stuart_Cheshire'>Stuart Cheshire</a> who pioneered this incredibly useful technology<br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()

if __name__ == "__main__":

    zb = ZeroconfBrowser()
